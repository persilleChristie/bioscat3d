#ifndef FIELDCALCULATORDIPOLE_H
#define FIELDCALCULATORDIPOLE_H

#include "FieldCalculator.h"
#include "../Utils/UtilsDipole.h"
#include "../Utils/Constants.h"
#include <Eigen/Dense>

/// @brief FieldCalculator for computing fields generated by a dipole.
/// @details This class extends the FieldCalculator class to implement the computation of
/// electric and magnetic fields generated by a dipole at specified evaluation points.
/// It uses the dipole's position and direction to compute the fields.
class FieldCalculatorDipole : public FieldCalculator {
public:
    /// @brief Constructor for FieldCalculatorDipole.
    /// @param dipole The dipole object containing position and direction.
    /// @param interior Boolean indicating if the dipole is in the interior (true) or exterior (false).
    FieldCalculatorDipole(const Dipole& dipole, const bool interior);

    /// @brief Computes the electric and magnetic fields at specified evaluation points.
    /// @details This method implements the computation of the electric and magnetic fields
    /// generated by the dipole at the given evaluation points. The fields are returned in the output matrices `outE` and `outH`.
    /// @param outE Output matrix for electric field components (Nx3 complex numbers).
    /// @param outH Output matrix for magnetic field components (Nx3 complex numbers).
    /// @param evalPoints Matrix of evaluation points (Nx3 real numbers).
    /// @param polarization_idx Index of the polarization to use (default is 0, used in total fields).
    virtual void computeFields(
        Eigen::MatrixX3cd& outE,
        Eigen::MatrixX3cd& outH,
        const Eigen::MatrixX3d& evalPoints,
        int polarization_idx = 0 // Only used in total fields
    ) const override;

    const Eigen::Vector3d& getDirection() const { return dipole_.getDirection(); }

private:
    Dipole dipole_;
    bool interiorBool_;
};

#endif // FIELDCALCULATORDIPOLE_H
